#include <iostream>
#include<chrono>
using namespace std;

int binarySearchIter(int nums[], int arrSize, int key) {
    int low = 0;
    int high = arrSize - 1;

    while (low <= high) {

        int mid = (low + high) / 2;
        if (key == nums[mid]) {
            return mid;
        }
        else if (key < nums[mid]) {
            high = mid - 1;
        }
        else {
            low = mid + 1;
        }

    }

    return -1;
}

int main() {
    //int nums[] = { 1,2,3,4,5,6,7,8,9,10 };
    //int nums[100] = { 9,33,56,97,102,106,121,126,130,134,143,145,150,196,203,207,216,227,254,264,289,296,297,315,319,330,332,333,343,363,367,378,378,386,433,444,449,463,485,497,499,506,522,537,544,548,551,552,579,585,586,595,600,607,621,631,634,635,641,643,657,672,685,690,697,703,712,713,746,749,755,761,802,820,823,835,836,842,849,855,855,873,877,878,888,889,906,906,909,920,931,938,947,948,963,972,972,987,994,998 };
    int nums[1000]= {1, 2, 3, 3, 4, 5, 5, 7, 8, 8, 8, 10, 11, 13, 14, 14, 18, 18, 18, 18, 21, 22, 22, 23, 27, 28, 28, 28, 29, 31, 32, 32, 36, 39, 40, 41, 43, 43, 44, 45, 45, 46, 47, 51, 51, 51, 55, 55, 55, 56, 57, 58, 59, 59, 60, 63, 64, 66, 66, 67, 68, 71, 72, 74, 74, 75, 76, 78, 80, 81, 83, 83, 84, 84, 87, 87, 87, 88, 90, 90, 90, 92, 94, 95, 96, 96, 96, 97, 101, 101, 102, 104, 107, 108, 109, 110, 111, 111, 113, 113, 113, 113, 113, 114, 114, 116, 118, 118, 118, 120, 120, 123, 124, 125, 125, 125, 125, 126, 126, 127, 128, 128, 131, 131, 133, 137, 138, 138, 141, 142, 143, 144, 144, 145, 146, 147, 148, 151, 152, 152, 153, 154, 154, 154, 155, 156, 156, 156, 156, 157, 162, 162, 162, 162, 163, 163, 165, 165, 166, 169, 170, 170, 171, 174, 175, 176, 177, 177, 178, 179, 183, 183, 186, 187, 188, 188, 188, 189, 190, 191, 192, 192, 192, 193, 193, 197, 198, 198, 198, 199, 200, 200, 201, 201, 203, 203, 206, 206, 206, 207, 207, 207, 208, 208, 210, 212, 213, 214, 214, 214, 216, 218, 219, 219, 221, 222, 222, 222, 223, 224, 226, 226, 227, 228, 232, 233, 236, 239, 240, 241, 242, 243, 243, 244, 244, 245, 247, 250, 251, 252, 252, 255, 257, 259, 260, 262, 263, 265, 265, 271, 273, 275, 276, 276, 276, 278, 279, 279, 280, 281, 281, 284, 284, 284, 285, 289, 289, 289, 290, 290, 290, 292, 294, 295, 297, 300, 301, 302, 303, 303, 303, 303, 303, 304, 304, 305, 306, 307, 307, 307, 307, 309, 310, 311, 312, 313, 315, 316, 317, 320, 323, 324, 326, 326, 327, 328, 328, 332, 332, 334, 334, 335, 336, 337, 337, 338, 338, 340, 340, 341, 341, 342, 342, 346, 347, 347, 349, 350, 351, 351, 352, 353, 353, 354, 354, 354, 355, 356, 356, 357, 358, 359, 361, 362, 362, 364, 365, 370, 371, 372, 373, 373, 374, 374, 375, 375, 375, 375, 376, 378, 380, 381, 381, 382, 382, 382, 382, 383, 383, 383, 384, 384, 387, 388, 390, 391, 392, 393, 396, 396, 397, 398, 398, 398, 399, 399, 400, 400, 401, 402, 403, 405, 408, 408, 409, 409, 410, 410, 414, 416, 416, 417, 420, 423, 423, 424, 424, 424, 426, 426, 427, 427, 428, 428, 431, 432, 433, 433, 434, 435, 436, 436, 437, 437, 437, 439, 440, 441, 441, 442, 443, 444, 445, 445, 446, 446, 448, 448, 448, 450, 452, 453, 454, 454, 456, 459, 459, 459, 460, 461, 464, 464, 465, 465, 466, 466, 469, 469, 469, 469, 470, 471, 471, 472, 473, 473, 473, 475, 476, 476, 477, 477, 478, 479, 481, 481, 483, 483, 485, 485, 488, 489, 491, 491, 492, 494, 494, 495, 495, 496, 496, 497, 497, 499, 499, 499, 499, 501, 503, 503, 503, 504, 505, 507, 508, 509, 512, 513, 514, 514, 516, 516, 519, 523, 524, 525, 526, 528, 528, 529, 529, 531, 531, 531, 532, 534, 534, 536, 536, 537, 537, 541, 544, 545, 546, 547, 547, 548, 548, 548, 550, 551, 551, 551, 551, 553, 556, 556, 557, 557, 558, 558, 559, 561, 561, 562, 566, 566, 566, 570, 572, 572, 573, 573, 573, 573, 573, 574, 575, 576, 576, 576, 577, 578, 579, 580, 580, 580, 581, 583, 584, 585, 586, 587, 590, 590, 590, 592, 592, 593, 593, 594, 594, 595, 596, 598, 599, 599, 601, 602, 602, 602, 605, 607, 607, 607, 609, 616, 617, 618, 618, 619, 620, 620, 620, 621, 623, 623, 627, 627, 630, 634, 635, 637, 637, 638, 638, 640, 641, 644, 644, 644, 646, 646, 647, 650, 651, 653, 653, 654, 656, 656, 657, 657, 658, 658, 659, 661, 663, 664, 665, 667, 668, 669, 669, 670, 670, 674, 674, 675, 675, 678, 680, 683, 683, 684, 686, 687, 689, 690, 691, 693, 693, 695, 696, 697, 697, 697, 698, 698, 701, 701, 702, 702, 703, 705, 706, 706, 707, 708, 710, 710, 711, 712, 713, 713, 714, 714, 714, 715, 717, 718, 718, 718, 720, 721, 722, 722, 723, 724, 724, 726, 728, 730, 731, 731, 732, 737, 737, 737, 738, 738, 738, 739, 740, 742, 742, 742, 742, 743, 743, 743, 744, 745, 747, 747, 747, 749, 752, 753, 754, 755, 756, 756, 757, 757, 757, 762, 763, 763, 764, 764, 765, 765, 766, 766, 767, 767, 770, 771, 771, 772, 772, 772, 772, 773, 773, 777, 781, 782, 782, 783, 783, 783, 783, 784, 785, 785, 785, 786, 788, 788, 788, 789, 790, 791, 791, 791, 792, 792, 793, 793, 795, 795, 795, 796, 797, 797, 799, 803, 804, 805, 806, 806, 806, 808, 810, 810, 812, 812, 813, 813, 815, 816, 816, 818, 819, 819, 819, 820, 821, 821, 823, 824, 826, 829, 829, 831, 831, 832, 832, 833, 833, 837, 838, 838, 838, 839, 839, 839, 840, 841, 843, 844, 847, 847, 849, 850, 850, 851, 854, 856, 856, 856, 856, 857, 859, 860, 860, 860, 861, 862, 862, 863, 863, 865, 865, 867, 868, 868, 868, 869, 871, 871, 873, 877, 877, 878, 879, 880, 880, 882, 882, 884, 885, 886, 889, 889, 890, 891, 891, 891, 892, 895, 895, 896, 897, 897, 897, 898, 898, 903, 906, 911, 911, 911, 911, 912, 914, 914, 915, 915, 916, 916, 917, 919, 919, 921, 923, 925, 926, 928, 931, 932, 933, 934, 934, 934, 935, 938, 938, 939, 939, 940, 942, 942, 945, 945, 945, 946, 947, 948, 949, 949, 950, 951, 952, 952, 953, 953, 954, 955, 956, 957, 957, 957, 962, 962, 962, 963, 965, 965, 965, 967, 968, 968, 969, 969, 970, 975, 975, 978, 978, 979, 979, 980, 981, 982, 983, 984, 985, 985, 988, 988, 989, 989, 990, 991, 992, 993, 993, 993, 995, 995, 996, 996, 997, 997, 999, 1000};
    int key = 0;
    cout << "Enter a number you want to find : ";
    cin >> key;
    int arrSize = sizeof(nums) / sizeof(nums[0]);


    auto start = chrono::high_resolution_clock::now();
    int foundIndex = binarySearchIter(nums, arrSize, key);
    auto end = chrono::high_resolution_clock::now();

    auto duration = chrono::duration_cast<chrono::microseconds>(end - start).count();



    if (foundIndex != -1) {
        cout << "We found index at " << foundIndex << endl;
    }
    else {
        cout << "The number is not in the list" << endl;
    }

    cout << "Time taken by Binary search: " << duration << " microseconds" << endl;


    return 0;
}